@page "/defmsg"
@using bdis_meistrija.Shared.Entities
@using bdis_meistrija.Client.Shared.DefMsgTable.components
@inject HttpClient Http
@inject IDefMsgRepository repo
@attribute [Authorize]

@if (defMsgs == null && (errorMsg == null || errorMsg.Length == 0))
{
    <ProgressIndicator Info="siunčiama..." />
}
else if (errorMsg != null && errorMsg.Length > 0)
{
    <div class="alert alert-info">@errorMsg</div>
}
else
{
    <table class="table-striped">
        <thead>
            <tr>
                <ColumnHeadCell Caption="Id" DataType="number" />
                <ColumnHeadCell Caption="Linija" DataType="number" />
                <ColumnHeadCell Caption="Kelias" DataType="text" />
                <ColumnHeadCell Caption="Km" DataType="number" />
                <ColumnHeadCell Caption="Pk" DataType="number" />
                <ColumnHeadCell Caption="M" DataType="number" />
                <ColumnHeadCell Caption="Siūlė" DataType="text" />
                <ColumnHeadCell Caption="Kodas" DataType="text" />
                <ColumnHeadCell Caption="Pavoj" DataType="text" />
                <ColumnHeadCell Caption="BTipas" DataType="text" />
                <ColumnHeadCell Caption="Aptikta" DataType="date" />
                <ColumnHeadCell Caption="Terminas" DataType="date" />
                <ColumnHeadCell Caption="Atlikimo data" DataType="date" />
                <ColumnHeadCell Caption="Būdas" DataType="text" />
                <AuthorizeView>
                    <Authorized>
                        <ColumnHeadCell Caption="Edit" DataType="" />
                    </Authorized>
                </AuthorizeView>
            </tr>
        </thead>
        <tbody>
            @foreach (var defMsg in defMsgs)
            {
            <tr>
                <td style="text-align: center; padding: 0 5px">@defMsg.Id</td>
                <td style="text-align: center; padding: 0 5px">@defMsg.Linija</td>
                <td style="text-align: center; padding: 0 5px">@defMsg.Kelias</td>
                <td style="text-align: center; padding: 0 5px">@defMsg.Km</td>
                <td style="text-align: center; padding: 0 5px">@defMsg.Pk</td>
                <td style="text-align: center; padding: 0 5px">@defMsg.M</td>
                <td style="text-align: center; padding: 0 5px">@defMsg.Siule</td>
                <td style="text-align: center; padding: 0 5px">@defMsg.Kodas</td>
                <td style="text-align: center; padding: 0 5px">@defMsg.Pavoj</td>
                <td style="text-align: center; padding: 0 5px">@defMsg.Btipas</td>
                <td style="text-align: center; padding: 0 5px">@defMsg.Aptikta.ToString("yyyy-MM-dd")</td>
                <td style="text-align: center; padding: 0 5px">@nullableDateValue(defMsg.Terminas)</td>
                <td style="text-align: center; padding: 0 5px">@nullableDateValue(defMsg.ActionDate)</td>
                <td style="text-align: center; padding: 0 5px">@getActionName(defMsg.ActionId)</td>
                <AuthorizeView>
                    <Authorized>
                        <td style="text-align: center; padding: 0 5px"><button type="button" @onclick="(() => showMsgEditForm(defMsg, actionData))" class="btn btn-sm btn-light">Keisti...</button></td>
                    </Authorized>
                </AuthorizeView>            
            </tr>
            }
        </tbody>
    </table>
}

@code {
    [CascadingParameter] public IModalService Modal { set; get; }
    List<DefMsg> defMsgs;
    string errorMsg;
    Dictionary<string, string> actionData = new Dictionary<string, string>(
        new KeyValuePair<string, string>[]
        {
            new KeyValuePair<string, string>("kei", "pakeistas bėgis"),
            new KeyValuePair<string, string>("vir", "pervirinta"),
            new KeyValuePair<string, string>("lyd", "aplydyta"),
            new KeyValuePair<string, string>("sli", "nušlifuota"),
            new KeyValuePair<string, string>("tva", "sutvarsliuota")
                }
    );

    string nullableDateValue(DateTime? nullableDate)
    {
        return nullableDate.HasValue ? nullableDate.Value.ToString("yyyy-MM-dd") : "";
    }

    string getActionName(string? actionId)
    {
        if (actionId == null) return null;
        else return actionData[actionId];
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            defMsgs = await repo.Fetch();
        }
        catch (Exception ex)
        {
            errorMsg = ex.Message;
        }
    }

    private void replaceDefMsg(DefMsg defMsg)
    {
        defMsgs[defMsgs.FindIndex(item => item.Id == defMsg.Id)] = defMsg;
    }

    async Task showMsgEditForm(DefMsg defMsg, Dictionary<string, string> actionData)
    {

        var parameters = new ModalParameters();
        parameters.Add(nameof(EditMessageForm.DefMsg), defMsg);
        parameters.Add(nameof(EditMessageForm.ActionData), actionData);

        var messageForm = Modal.Show<EditMessageForm>("Redaguoti pranešimą", parameters);
        var result = await messageForm.Result;

        if (!result.Cancelled)
        {
            replaceDefMsg((DefMsg)result.Data);
        }
    }
}
