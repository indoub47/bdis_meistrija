@page "/users/edit/{userId}"
@inject IUserRepository userRepository
@inject IDisplayMessage displayMessage
@using bdis_meistrija.Client.Data


<h3>EditUser</h3>
<div class="form-inline">
    <select class="form-control mb-2 mr-sm-2" @bind="selectedRole">
        <option value="0">--Select a role--</option>
        @foreach (var role in roles)
        {
            <option value="@role.RoleName">@role.RoleName</option>
        }
    </select>
    <button class="btn bnt-info mb-2 mr-sm-2" @onclick="AssignRole">Assign Role</button>
    <button class="btn bnt-danger mb-2 mr-sm-2" @onclick="RemoveRole">Remove Role</button>
</div>

@code {
    [Parameter] public string UserId { get; set; }
    private List<RoleDTO> roles = new List<RoleDTO>();

    private string selectedRole = "0";

    protected override async Task OnInitializedAsync()
    {
        roles = await userRepository.GetRoles();
    }

    private async Task AssignRole()
    {
        if(selectedRole == "0")
        {
            await displayMessage.DisplayErrorMessage("You must select message");
            return;
        }
        await userRepository.AssignRole(new EditRoleDTO() { RoleName = selectedRole, UserId = this.UserId });
        await displayMessage.DisplaySuccessMessage("Role asssigned");
    }

    private async Task RemoveRole()
    {
        if (selectedRole == "0")
        {
            await displayMessage.DisplayErrorMessage("You must select message");
            return;
        }
        await userRepository.RemoveRole(new EditRoleDTO() { RoleName = selectedRole, UserId = this.UserId });
        await displayMessage.DisplaySuccessMessage("Role removed");
    }
}
